import cv2

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Å–∫–∞–¥—É
face_cascade = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

# –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –≤—ñ–¥–µ–æ—Ñ–∞–π–ª—É
cap = cv2.VideoCapture("video.mp4")

if not cap.isOpened():
    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –≤—ñ–¥–µ–æ.")
    exit()

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # –í—ñ–¥—Ç—ñ–Ω–∫–∏ —Å—ñ—Ä–æ–≥–æ
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –æ–±–ª–∏—á
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # üîΩ –ó–º–µ–Ω—à–µ–Ω–Ω—è –∫–∞–¥—Ä—É –¥–æ —à–∏—Ä–∏–Ω–∏ 320 –ø—ñ–∫—Å–µ–ª—ñ–≤
    width = 320
    height = int(frame.shape[0] * (width / frame.shape[1]))
    resized_frame = cv2.resize(frame, (width, height))

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    cv2.imshow('Face Detection Video', resized_frame)

    if cv2.waitKey(25) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
